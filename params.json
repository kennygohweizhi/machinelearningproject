{"name":"Machinelearningproject","tagline":"","body":"**Background**\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).\r\n\r\n**Data **\r\nThe training data for this project are available here: \r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\r\n\r\nThe test data are available here: \r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\r\n\r\nThe data for this project come from this source: http://groupware.les.inf.puc-rio.br/har. \r\n\r\nWe first read the two datasets:\r\n\r\n````\r\nsubmission = read.csv(\"pml-testing.csv\")\r\ntrain = read.csv(\"pml-training.csv\")\r\n````\r\n\r\n** Partitioning the training set**\r\nWe separate the training set into a training and testing set, to validate the model\r\n````\r\nset.seed(3333)\r\nsampling = createDataPartition(train$classe, p = 0.8, list=F)\r\ntraining = train[sampling,]\r\ntesting = train[-sampling,]\r\ndim(training); dim(testing)\r\n```\r\nWe have 15,699 observations in the training set, and 3,923 in the testing set. There are 160 variables.\r\n\r\n** Creating covariates: NA terms **\r\nFirst, we remove variables where NAs comprise over half of its observations\r\n````\r\nrmNA = which(apply(training, 2, function(x) sum(is.na(x)))> nrow(training)/2)\r\nprocTraining = training[,-rmNA]\r\nprocTesting = testing[,-rmNA]\r\nprocSubmission = submission[,-rmNA]\r\n````\r\n\r\n** Creating covariates: near zero variance terms**\r\nSecond, we exclude variables which have near zero variance\r\n````\r\nnearZeroCol = nearZeroVar(procTraining)\r\nprocTraining = procTraining[,-nearZeroCol]\r\nprocTesting = procTesting[,-nearZeroCol]\r\nprocSubmission = procSubmission[,-nearZeroCol]\r\n````\r\n\r\n** Creating covariates: descriptive variables**\r\nLastly, we drop the first six variables which are descriptive variables \r\nprocTraining = procTraining[, -c(1:6)]\r\nprocTesting = procTesting[, -c(1:6)]\r\nprocSubmission = procSubmission[, -c(1:6)]\r\n\r\n** Dimension reduction using PCA **\r\n````\r\ndim(procTraining)\r\n````\r\nWe still have 53 variables, which will take some time to process. Hence, we reduce the number of covariates using PCA. \r\n````\r\npca = preProcess(procTraining[,-53], method=\"pca\", thresh=0.9)\r\npca\r\n````\r\nWe now have 18 predictors\r\n\r\n\r\n** Model fitting **\r\nWe will use random forest.\r\n````\r\nmodelTREE = train(procTraining$classe~., data=pcatraining, method=\"rf\")\r\n````\r\n\r\n*** Out of sample accuracy ***\r\nTest the model on the testing dataset.\r\n````\r\nconfusionMatrix(predict(modelTREE, pcatesting), procTesting$classe)\r\n````\r\n\r\nThe results are shown below. We have achieved an accuracy rate of 97.99%.\r\n````\r\nConfusion Matrix and Statistics\r\n          Reference\r\nPrediction    A    B    C    D    E\r\n         A 1104   11    1    2    0\r\n         B    7  733    7    0    1\r\n         C    3   14  665   12    3\r\n         D    2    0   11  628    3\r\n         E    0    1    0    1  714\r\n\r\nOverall Statistics                                      \r\n               Accuracy : 0.9799        \r\n                 95% CI : (0.975, 0.984)\r\n    No Information Rate : 0.2845        \r\n    P-Value [Acc > NIR] : < 2.2e-16     \r\n                                        \r\n                  Kappa : 0.9745        \r\n Mcnemar's Test P-Value : NA            \r\n\r\nStatistics by Class:\r\n                     Class: A Class: B Class: C Class: D Class: E\r\nSensitivity            0.9892   0.9657   0.9722   0.9767   0.9903\r\nSpecificity            0.9950   0.9953   0.9901   0.9951   0.9994\r\nPos Pred Value         0.9875   0.9799   0.9541   0.9752   0.9972\r\nNeg Pred Value         0.9957   0.9918   0.9941   0.9954   0.9978\r\nPrevalence             0.2845   0.1935   0.1744   0.1639   0.1838\r\nDetection Rate         0.2814   0.1868   0.1695   0.1601   0.1820\r\nDetection Prevalence   0.2850   0.1907   0.1777   0.1642   0.1825\r\nBalanced Accuracy      0.9921   0.9805   0.9812   0.9859   0.9948\r\n````\r\n\r\n*** Predicting on the test data, for project submission ***\r\nPredicting on the test data:\r\n````\r\npredsubmission = predict(modelTREE, pcasubmission)\r\n````\r\n\r\nWe obtain the answers\r\n````\r\n [1] B A B A A E D B A A B C B A E E A B B B\r\nLevels: A B C D E\r\n````\r\n\r\nLastly, we output the results:\r\n````\r\noutput = as.character(predsubmission)\r\n\r\npml_write_files = function(x) {\r\n    n = length(x)\r\n    for (i in 1:n) {\r\n        filename = paste0(\"problem_id_\", i, \".txt\")\r\n        write.table(x[i], file = filename, quote = FALSE, row.names = FALSE, \r\n            col.names = FALSE)\r\n    }\r\n}\r\n\r\npml_write_files(output)\r\n````","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}